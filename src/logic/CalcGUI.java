
package logic;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.FileWriter;
import java.text.NumberFormat;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Chris
 */
public class CalcGUI extends javax.swing.JFrame {    
    
    
    
    
    public CalcGUI() {
        initComponents();
        
       //initial colour
        txtMight.setBorder(BorderFactory.createLineBorder(Color.gray));
        txtPrecision.setBorder(BorderFactory.createLineBorder(Color.gray));
        txtFerocity.setBorder(BorderFactory.createLineBorder(Color.gray));
        txtMultipliers.setBorder(BorderFactory.createLineBorder(Color.gray));
        txtFuryUptime.setBorder(BorderFactory.createLineBorder(Color.gray));
        txtArmour.setBorder(BorderFactory.createLineBorder(Color.gray));
        txtBaseArmour.setBorder(BorderFactory.createLineBorder(Color.gray));
        txtPower.setBorder(BorderFactory.createLineBorder(Color.gray));
        txtHitPoints.setBorder(BorderFactory.createLineBorder(Color.gray));
        
        //tool tips
        txtMight.setToolTipText("0-25");
        lblMight.setToolTipText("0-25");
        txtPrecision.setToolTipText("recall that 1% crit chance is 21.16 precision at level 80");
        lblPrecision.setToolTipText("recall that 1% crit chance is 21.16 precision at level 80");
        txtFerocity.setToolTipText("recall that 1% crit damage is 15 ferocity at level 80");
        lblFerocity.setToolTipText("recall that 1% crit damage is 15 ferocity at level 80");
        txtMultipliers.setToolTipText("*This is multiplicative; two 10% modifiers would be 1.1 * 1.1 = 1.21, not 20%.");
        lblMultiplier.setToolTipText("*This is multiplicative; two 10% modifiers would be 1.1 * 1.1 = 1.21, not 20%.");
        txtFuryUptime.setToolTipText("1 means fury is up, 0 it is not. Do decimals to represent uptime; ex. 50% uptime = 0.5");
        lblFuryUptime.setToolTipText("1 means fury is up, 0 it is not. Do decimals to represent uptime; ex. 50% uptime = 0.5");        
        txtBaseArmour.setToolTipText("** Base armour is dependent on class. Heavy - 2137 Medium - 1990 Light - 1846 ");
        lblBaseArmour.setToolTipText("** Base armour is dependent on class. Heavy - 2137 Medium - 1990 Light - 1846 ");
        
        lblPerception.setToolTipText("This is your new EP after getting 25 perception stacks.");
        lblBloodlust.setToolTipText("This is your new EP after getting 25 bloodlust stacks.");
        lblCruelty.setToolTipText("This is your new EP after getting 25 cruelty stacks");
        
        lblEHAddHealth.setToolTipText("The effect on EH after adding 1000 health (100 vitality)");
        lblEHAddTough.setToolTipText("The effect on EH after adding 100 toughness");           
    }   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblPrecision = new javax.swing.JLabel();
        lblFerocity = new javax.swing.JLabel();
        lblMultiplier = new javax.swing.JLabel();
        txtPower = new javax.swing.JTextField();
        txtPrecision = new javax.swing.JTextField();
        txtFerocity = new javax.swing.JTextField();
        txtMultipliers = new javax.swing.JTextField();
        btnCalculate = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblBaseArmour = new javax.swing.JLabel();
        txtHitPoints = new javax.swing.JTextField();
        txtArmour = new javax.swing.JTextField();
        txtBaseArmour = new javax.swing.JTextField();
        lblEP = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblBloodlust = new javax.swing.JLabel();
        lblPerception = new javax.swing.JLabel();
        lblCruelty = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        lblEH = new javax.swing.JLabel();
        lblEHAddHealth = new javax.swing.JLabel();
        lblEHAddTough = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        lblMight = new javax.swing.JLabel();
        txtMight = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        lblFuryUptime = new javax.swing.JLabel();
        txtFuryUptime = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        btnHelp = new javax.swing.JButton();
        chkSigil = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuSaveAs = new javax.swing.JMenu();
        JMenuExportHTML = new javax.swing.JMenuItem();
        JMenuSaveAs = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        jLabel1.setText("Title");

        jLabel3.setText("Power");

        lblPrecision.setText("Precision");

        lblFerocity.setText("Ferocity");

        lblMultiplier.setText("Multipliers*");

        txtPower.setText("2000");
        txtPower.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPowerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPowerFocusLost(evt);
            }
        });
        txtPower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPowerActionPerformed(evt);
            }
        });

        txtPrecision.setText("1500");
        txtPrecision.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPrecisionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrecisionFocusLost(evt);
            }
        });
        txtPrecision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecisionActionPerformed(evt);
            }
        });

        txtFerocity.setText("1000");
        txtFerocity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFerocityFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFerocityFocusLost(evt);
            }
        });
        txtFerocity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFerocityActionPerformed(evt);
            }
        });

        txtMultipliers.setText("1");
        txtMultipliers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMultipliersFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMultipliersFocusLost(evt);
            }
        });
        txtMultipliers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMultipliersActionPerformed(evt);
            }
        });

        btnCalculate.setText("Calculate!");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });
        btnCalculate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCalculateKeyPressed(evt);
            }
        });

        jLabel6.setText("Effective Power:");

        jLabel7.setText("Hit points");

        jLabel8.setText("Armour");

        lblBaseArmour.setText("Base Armour**");

        txtHitPoints.setText("25000");
        txtHitPoints.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtHitPointsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHitPointsFocusLost(evt);
            }
        });
        txtHitPoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHitPointsActionPerformed(evt);
            }
        });

        txtArmour.setText("3000");
        txtArmour.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtArmourFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtArmourFocusLost(evt);
            }
        });

        txtBaseArmour.setText("2137");
        txtBaseArmour.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBaseArmourFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBaseArmourFocusLost(evt);
            }
        });

        lblEP.setText("_");

        jLabel10.setText("EP Bloodlust:");

        jLabel11.setText("EP Perception:");

        jLabel12.setText("EP Cruelty:");

        lblBloodlust.setText("_");

        lblPerception.setText("_");

        lblCruelty.setText("_");

        jLabel13.setText("Effective Health:");

        jLabel14.setText("EH + 1000 Health:");

        jLabel15.setText("EH + 100 Toughness:");

        lblEH.setText("_");

        lblEHAddHealth.setText("_");

        lblEHAddTough.setText("_");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel20.setText("NOTES:");

        lblMight.setText("Might Stacks");

        txtMight.setText("0");
        txtMight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMightFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMightFocusLost(evt);
            }
        });
        txtMight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMightActionPerformed(evt);
            }
        });

        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnExit.setText("EXIT");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        lblFuryUptime.setText("Fury Uptime");

        txtFuryUptime.setText("1");
        txtFuryUptime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFuryUptimeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFuryUptimeFocusLost(evt);
            }
        });

        txtArea.setColumns(20);
        txtArea.setRows(5);
        txtArea.setText("Write your notes here!");
        txtArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAreaFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(txtArea);

        btnHelp.setText("HELP");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });

        chkSigil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSigilActionPerformed(evt);
            }
        });

        jLabel5.setText("Accuracy Sigil?");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel2.setText("VERSION 1.2");

        jMenuBar1.setToolTipText("");
        jMenuBar1.setPreferredSize(new java.awt.Dimension(42, 30));

        jMenuSaveAs.setText("File");
        jMenuSaveAs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuSaveAsMouseClicked(evt);
            }
        });

        JMenuExportHTML.setText("Export to HTML Document");
        JMenuExportHTML.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                JMenuExportHTMLMousePressed(evt);
            }
        });
        JMenuExportHTML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMenuExportHTMLActionPerformed(evt);
            }
        });
        jMenuSaveAs.add(JMenuExportHTML);

        JMenuSaveAs.setText("SaveAs");
        JMenuSaveAs.setToolTipText("");
        JMenuSaveAs.setPreferredSize(new java.awt.Dimension(90, 30));
        JMenuSaveAs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JMenuSaveAsMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                JMenuSaveAsMousePressed(evt);
            }
        });
        JMenuSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMenuSaveAsActionPerformed(evt);
            }
        });
        jMenuSaveAs.add(JMenuSaveAs);

        jMenuBar1.add(jMenuSaveAs);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblPrecision)
                                            .addComponent(lblFerocity)
                                            .addComponent(lblMultiplier)
                                            .addComponent(jLabel3))
                                        .addGap(43, 43, 43)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtPrecision, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtFerocity, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtMultipliers, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtPower, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtFuryUptime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtMight, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(lblMight)
                                    .addComponent(lblFuryUptime)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(chkSigil))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel8)
                                            .addComponent(lblBaseArmour))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtHitPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(txtArmour, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtBaseArmour, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(81, 81, 81)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel14)
                                                    .addComponent(jLabel13))
                                                .addGap(37, 37, 37))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel15)
                                                .addGap(18, 18, 18)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblEH)
                                            .addComponent(lblEHAddHealth)
                                            .addComponent(lblEHAddTough)))
                                    .addComponent(filler4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(filler5, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(27, 27, 27))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel6)
                                                .addComponent(jLabel10)
                                                .addComponent(jLabel11)
                                                .addComponent(jLabel12)))
                                        .addGap(45, 45, 45)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblEP)
                                            .addComponent(lblBloodlust)
                                            .addComponent(lblPerception)
                                            .addComponent(lblCruelty)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel22)
                                    .addComponent(jLabel21))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnCalculate, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnHelp)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnClear)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnExit)))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(lblEP))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(lblBloodlust)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblMight)
                                    .addComponent(txtMight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFuryUptime)
                                    .addComponent(txtFuryUptime, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(lblPerception))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(lblCruelty))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(txtPower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblPrecision)
                                    .addComponent(txtPrecision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblFerocity)
                                    .addComponent(txtFerocity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblMultiplier)
                            .addComponent(txtMultipliers)
                            .addComponent(filler4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filler5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblEH)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(lblEHAddHealth))
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(lblEHAddTough))
                                .addGap(9, 9, 9))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(chkSigil))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel7))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(lblBaseArmour))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txtHitPoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(txtArmour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(txtBaseArmour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel19)
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(90, 90, 90)
                                        .addComponent(jLabel22))
                                    .addComponent(jLabel21))
                                .addGap(47, 47, 47))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCalculate, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnClear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnHelp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnExit))))
                                .addGap(0, 33, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        txtPower.getAccessibleContext().setAccessibleName("txtPower");
        txtPrecision.getAccessibleContext().setAccessibleName("txtPrecision");
        txtFerocity.getAccessibleContext().setAccessibleName("txtFerocity");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPrecisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecisionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecisionActionPerformed

    private void txtFerocityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFerocityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFerocityActionPerformed

    private void txtMultipliersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMultipliersActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMultipliersActionPerformed
     
    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        //This is the main calculate button
        
        try
        {
        //get values from the GUI text fields. Parse for doubles; remove whitespace.    
        double power = Double.parseDouble(txtPower.getText().trim());
        double precision = Double.parseDouble(txtPrecision.getText().trim());
        double ferocity = Double.parseDouble(txtFerocity.getText().trim());
        int mightStacks = Integer.parseInt(txtMight.getText().trim());
        double health = Double.parseDouble(txtHitPoints.getText().trim());
        double armour = Double.parseDouble(txtArmour.getText().trim());
        double baseArmour = Double.parseDouble(txtBaseArmour.getText().trim());
        double damageMul = Double.parseDouble(txtMultipliers.getText().trim());
        double furyUptime = Double.parseDouble(txtFuryUptime.getText().trim());
        boolean sigilChecked = chkSigil.isSelected();


        //deal with sigil of accuracy
        //recall 1% crit chance is 21.16 precision; therefore...
        if(sigilChecked)
        {
        precision += 148.12;
        }


        //number format controls how many decimal places we show in the result
        NumberFormat nf = NumberFormat.getNumberInstance();


        //add power from might stacks onto power from text field
        power += ((double)(mightStacks * 30));

        lblEP.setText("" + nf.format(Calculations.getEP(power, precision, ferocity, damageMul, furyUptime)));


        //update this for each of the sigils.
        //must reset to original values after each sigil!
        power += 250;
        lblBloodlust.setText("" + nf.format(Calculations.getEP(power, precision, ferocity, damageMul, furyUptime)));        
        power -=250;

        ferocity += 250;
        lblCruelty.setText("" + nf.format(Calculations.getEP(power, precision, ferocity, damageMul, furyUptime)));        
        ferocity -=250;

        precision += 250;
        lblPerception.setText("" + nf.format(Calculations.getEP(power, precision, ferocity, damageMul, furyUptime)));        
        precision -=250;

        //Effective health here.

        lblEH.setText("" + nf.format(Calculations.getEH(health, armour, baseArmour)));

        //determine new EH with the addition of equivalent amounts of vitality or toughness.
        //recall 10 health = 1 vitality

        health += 1000;
        lblEHAddHealth.setText("" + nf.format(Calculations.getEH(health, armour, baseArmour)));
        health -= 1000;

        armour += 100;
        lblEHAddTough.setText("" + nf.format(Calculations.getEH(health, armour, baseArmour)));
        armour -= 100;

        }
        catch(Exception ex)
        {
         JOptionPane.showMessageDialog(null,"The input was invalid. Please ensure all fields have number values.","ERROR:",JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void txtHitPointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHitPointsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHitPointsActionPerformed

    private void txtMightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMightActionPerformed

    private void txtPowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPowerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPowerActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
       //clear all boxes
        txtArmour.setText("");
        txtBaseArmour.setText("");
        txtFerocity.setText("");
        txtHitPoints.setText("");
        txtMight.setText("0");
        txtMultipliers.setText("1");
        txtPower.setText("");
        txtPrecision.setText("");
       
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(1);
    }//GEN-LAST:event_btnExitActionPerformed

    private void txtMightFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMightFocusGained
   txtMight.selectAll();   
   txtMight.setBorder(BorderFactory.createLineBorder(Color.white));
    }//GEN-LAST:event_txtMightFocusGained

    private void txtFuryUptimeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFuryUptimeFocusGained
    txtFuryUptime.selectAll();   
    txtFuryUptime.setBorder(BorderFactory.createLineBorder(Color.white));
    }//GEN-LAST:event_txtFuryUptimeFocusGained

    private void txtPowerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPowerFocusGained
    txtPower.selectAll();   
    txtPower.setBorder(BorderFactory.createLineBorder(Color.white));
    }//GEN-LAST:event_txtPowerFocusGained

    private void txtPrecisionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecisionFocusGained
    txtPrecision.selectAll();   
    txtPrecision.setBorder(BorderFactory.createLineBorder(Color.white));
    }//GEN-LAST:event_txtPrecisionFocusGained

    private void txtFerocityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFerocityFocusGained
    txtFerocity.selectAll();   
    txtFerocity.setBorder(BorderFactory.createLineBorder(Color.white));
    }//GEN-LAST:event_txtFerocityFocusGained

    private void txtMultipliersFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMultipliersFocusGained
    txtMultipliers.selectAll();   
    txtMultipliers.setBorder(BorderFactory.createLineBorder(Color.white));
    }//GEN-LAST:event_txtMultipliersFocusGained

    private void txtHitPointsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHitPointsFocusGained
    txtHitPoints.selectAll();   
    txtHitPoints.setBorder(BorderFactory.createLineBorder(Color.white));
    }//GEN-LAST:event_txtHitPointsFocusGained

    private void txtArmourFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtArmourFocusGained
    txtArmour.selectAll();   
    txtArmour.setBorder(BorderFactory.createLineBorder(Color.white));
    }//GEN-LAST:event_txtArmourFocusGained

    private void txtBaseArmourFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBaseArmourFocusGained
    txtBaseArmour.selectAll();   
    txtBaseArmour.setBorder(BorderFactory.createLineBorder(Color.white));
    }//GEN-LAST:event_txtBaseArmourFocusGained

    private void txtMightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMightFocusLost
    txtMight.setBorder(BorderFactory.createLineBorder(Color.gray));
    //txtMight.setBorder(javax.swing.BorderFactory.createEmptyBorder());
    }//GEN-LAST:event_txtMightFocusLost

    private void txtFuryUptimeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFuryUptimeFocusLost
    txtFuryUptime.setBorder(BorderFactory.createLineBorder(Color.gray));
    }//GEN-LAST:event_txtFuryUptimeFocusLost

    private void txtPowerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPowerFocusLost
    txtPower.setBorder(BorderFactory.createLineBorder(Color.gray));
    }//GEN-LAST:event_txtPowerFocusLost

    private void txtPrecisionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecisionFocusLost
    txtPrecision.setBorder(BorderFactory.createLineBorder(Color.gray));
    }//GEN-LAST:event_txtPrecisionFocusLost

    private void txtFerocityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFerocityFocusLost
    txtFerocity.setBorder(BorderFactory.createLineBorder(Color.gray));
    }//GEN-LAST:event_txtFerocityFocusLost

    private void txtMultipliersFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMultipliersFocusLost
    txtMultipliers.setBorder(BorderFactory.createLineBorder(Color.gray));
    }//GEN-LAST:event_txtMultipliersFocusLost

    private void txtHitPointsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHitPointsFocusLost
    txtHitPoints.setBorder(BorderFactory.createLineBorder(Color.gray));
    }//GEN-LAST:event_txtHitPointsFocusLost

    private void txtArmourFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtArmourFocusLost
    txtArmour.setBorder(BorderFactory.createLineBorder(Color.gray));
    }//GEN-LAST:event_txtArmourFocusLost

    private void txtBaseArmourFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBaseArmourFocusLost
    txtBaseArmour.setBorder(BorderFactory.createLineBorder(Color.gray));
    }//GEN-LAST:event_txtBaseArmourFocusLost

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        JOptionPane.showMessageDialog(null," Fury uptime is from 0 to 1 where 0 is not up, 1 is up, and 0.5 would be 50% uptime for example. \n \n *Damage multiplier field is multiplicative; two 10% modifiers would be 1.1 * 1.1 = 1.21, not 20%. \n  \n  ** Base armour is dependent on class. Heavy - 2137 Medium - 1990 Light - 1846 ","HELP:",JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_btnHelpActionPerformed

    private void txtAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAreaFocusGained
    txtArea.setText("");
    }//GEN-LAST:event_txtAreaFocusGained

    private void chkSigilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSigilActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkSigilActionPerformed

    private void btnCalculateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCalculateKeyPressed
        
          
    }//GEN-LAST:event_btnCalculateKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER)
          {
              btnCalculateActionPerformed(null);
          }
    
     if(evt.getKeyCode() == KeyEvent.VK_ESCAPE)
     {
        int reply = JOptionPane.showConfirmDialog(null,"Are you sure you want to exit the program?","Exit:",JOptionPane.YES_NO_OPTION);
                 
         if(reply == 0)
         {
         System.exit(1);
         }    
     }     
     if(evt.getKeyCode() == KeyEvent.VK_H)
     {
         btnHelpActionPerformed(null);
     }     
     
     
    }//GEN-LAST:event_formKeyPressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        requestFocus();    
    }//GEN-LAST:event_formMouseClicked

    private void jMenuSaveAsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuSaveAsMouseClicked
     
    }//GEN-LAST:event_jMenuSaveAsMouseClicked

    private void JMenuSaveAsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JMenuSaveAsMouseClicked
     
    }//GEN-LAST:event_JMenuSaveAsMouseClicked

    private void JMenuSaveAsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JMenuSaveAsMousePressed
    
        //get values
        String might = txtMight.getText().trim();
        String furyUptime = txtFuryUptime.getText().trim();
        String power = txtPower.getText().trim();
        String precision = txtPrecision.getText().trim();
        String ferocity = txtFerocity.getText().trim();
        String multipliers = txtMultipliers.getText().trim();
        Boolean sigil = chkSigil.isSelected();
        String mySigil;
        String hitPoints = txtHitPoints.getText().trim();
        String armour = txtArmour.getText().trim();
        String baseArmour = txtBaseArmour.getText().trim();
        
        String EP = lblEP.getText().trim();
        String bloodlust = lblBloodlust.getText().trim();
        String perception = lblPerception.getText().trim();
        String cruelty = lblCruelty.getText().trim();
        String EH = lblEH.getText().trim();
        String EHAddHealth = lblEHAddHealth.getText().trim();
        String EHAddTough = lblEHAddTough.getText().trim();
               
        String textArea = txtArea.getText().trim();
         
        //write message based on whether or not it's checked.
        if(sigil)        
        mySigil = "Sigil of Accuracy";        
        else
        mySigil = "No Sigil";    
         
        FormInfo myForm = new FormInfo
        (might, furyUptime, power, precision, ferocity, multipliers, mySigil, hitPoints, armour, baseArmour, EP, bloodlust, perception, cruelty, EH, EHAddHealth, EHAddTough, textArea);
        
        //Filechooser to let the user decide where it is saved.
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showSaveDialog(null);
        
       
        if(returnVal != 1)
        {            
            try(FileWriter fw = new FileWriter(fc.getSelectedFile()+".txt")) 
            {
               
                String finalOutput = myForm.toString();
                fw.write(finalOutput);  
                fw.flush();
                fw.close();
                
                JOptionPane.showMessageDialog(null,"Text document has been successfully created at that location! ","Success!",JOptionPane.WARNING_MESSAGE);

            }
            catch (Exception ex)
            {
                System.out.println(ex.toString());
                JOptionPane.showMessageDialog(null,"Could not generate the file at the specified location.  Error at: " + ex.toString(),"ERROR!",JOptionPane.WARNING_MESSAGE);

            }
        }
        
       
     
    }//GEN-LAST:event_JMenuSaveAsMousePressed

    private void JMenuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JMenuSaveAsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JMenuSaveAsActionPerformed

    private void JMenuExportHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JMenuExportHTMLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JMenuExportHTMLActionPerformed

    private void JMenuExportHTMLMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JMenuExportHTMLMousePressed
        //get values
        String might = txtMight.getText().trim();
        String furyUptime = txtFuryUptime.getText().trim();
        String power = txtPower.getText().trim();
        String precision = txtPrecision.getText().trim();
        String ferocity = txtFerocity.getText().trim();
        String multipliers = txtMultipliers.getText().trim();
        Boolean sigil = chkSigil.isSelected();
        String mySigil;
        String hitPoints = txtHitPoints.getText().trim();
        String armour = txtArmour.getText().trim();
        String baseArmour = txtBaseArmour.getText().trim();
        
        String EP = lblEP.getText().trim();
        String bloodlust = lblBloodlust.getText().trim();
        String perception = lblPerception.getText().trim();
        String cruelty = lblCruelty.getText().trim();
        String EH = lblEH.getText().trim();
        String EHAddHealth = lblEHAddHealth.getText().trim();
        String EHAddTough = lblEHAddTough.getText().trim();
               
        String textArea = txtArea.getText().trim();
         
        //write message based on whether or not it's checked.
        if(sigil)        
        mySigil = "Sigil of Accuracy";        
        else
        mySigil = "No Sigil";    
         
        FormInfo myForm = new FormInfo
        (might, furyUptime, power, precision, ferocity, multipliers, mySigil, hitPoints, armour, baseArmour, EP, bloodlust, perception, cruelty, EH, EHAddHealth, EHAddTough, textArea);
        
        //Filechooser to let the user decide where it is saved.
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showSaveDialog(null);
        
       
        if(returnVal != 1)
        {            
            try(FileWriter fw = new FileWriter(fc.getSelectedFile()+".html")) 
            {
                String finalOutput = myForm.toHTML();
                
                fw.write("<!DOCTYPE html>");
                fw.write("<html>");
                fw.write("<body>");
                fw.write("<h1>Results:</h1>");
                fw.write("<hr>");
                fw.write("<table border='1'>");
                fw.write(finalOutput); 
                fw.write("</table>");
                fw.write("</body>");
                fw.write("</html>");
                fw.write("<br><br><br> <hr><b>Created by  Chris 2015. </b>");
                
                fw.flush();
                fw.close();
                JOptionPane.showMessageDialog(null,"HTML document has been successfully created at that location! ","Success!",JOptionPane.WARNING_MESSAGE);

            }
            catch (Exception ex)
            {
                System.out.println(ex.toString());
                JOptionPane.showMessageDialog(null,"Could not generate the file at the specified location.  Error at: " + ex.toString(),"ERROR!",JOptionPane.WARNING_MESSAGE);

            }
        }
        
    }//GEN-LAST:event_JMenuExportHTMLMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalcGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalcGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalcGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalcGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalcGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem JMenuExportHTML;
    private javax.swing.JMenuItem JMenuSaveAs;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnHelp;
    private javax.swing.JCheckBox chkSigil;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuSaveAs;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBaseArmour;
    private javax.swing.JLabel lblBloodlust;
    private javax.swing.JLabel lblCruelty;
    private javax.swing.JLabel lblEH;
    private javax.swing.JLabel lblEHAddHealth;
    private javax.swing.JLabel lblEHAddTough;
    private javax.swing.JLabel lblEP;
    private javax.swing.JLabel lblFerocity;
    private javax.swing.JLabel lblFuryUptime;
    private javax.swing.JLabel lblMight;
    private javax.swing.JLabel lblMultiplier;
    private javax.swing.JLabel lblPerception;
    private javax.swing.JLabel lblPrecision;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtArmour;
    private javax.swing.JTextField txtBaseArmour;
    private javax.swing.JTextField txtFerocity;
    private javax.swing.JTextField txtFuryUptime;
    private javax.swing.JTextField txtHitPoints;
    private javax.swing.JTextField txtMight;
    private javax.swing.JTextField txtMultipliers;
    private javax.swing.JTextField txtPower;
    private javax.swing.JTextField txtPrecision;
    // End of variables declaration//GEN-END:variables

   

   
}
